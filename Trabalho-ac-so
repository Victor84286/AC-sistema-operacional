#!/bin/bash
trap "echo '';echo 'Não vai fechar'" SIGINT
# achar o quanto de espaco esta ocupado por arquivo vazio
cabecalho(){
clear
ANO=$(date +%y)
if [ $(date +%m) -lt 7 ]; then
sem=1
else
sem=2
fi
width=$(tput cols)
name_length=5 # Adjust according to your name length
line_length=$((width - name_length - 2))
printf '\33[44;33m%.0s#' $(seq 1 $line_length)
printf "\n# IBMEC"
printf '%*s' $((width - 15)) ""
printf "#\n"
printf "# Sistemas Operacionais"
printf '%*s' $((width - 48)) ""
printf "Semestre $sem de $ANO #\n"
printf "# Código: IBM8940"
printf '%*s' $((width - 37)) ""
printf "turma: 8001 #\n"
printf "# Professor: Luiz Fernando T. de Farias"
printf '%*s' $((width - 47)) ""
printf "#\n"
let line_length=$line_length-2
printf '%.0s#'
printf '%.0s-' $(seq 1 $line_length)
printf '%.0s#\n'
printf "# Aluno 1: Victor Hugo Rocha Aguiar Pinto"
printf '%*s' $((width - 49)) ""
printf "#\n"
printf "# Aluno 2: Gabriel Peixoto Da Silva Espósito Oliveira"
printf '%*s' $((width - 61)) ""
printf "#\n"
printf '%.0s#'
printf '%.0s-' $(seq 1 $line_length)
printf '%.0s#\n'
if [ $(date +%d) -lt 10 ]; then
dia=1
else
dia=2
fi
if [ $(date +%y) -lt 10 ]; then
ano=1
else
if [ $(date +%y) -lt 100 ]; then
ano=2
else
if [ $(date +%y) -lt 1000 ]; then
ano=3
else
if [ $(date +%y) -lt 10000 ]; then
ano=4
else
if [ $(date +%y) -lt 100000 ]; then
ano=5
fi
fi
fi
fi
fi
if [ $(date +%B) == "janeiro" ]; then
mes=7
else
if [ $(date +%B) == "fevereiro" ]; then
mes=9
else
if [ $(date +%B) == "março" ]; then
mes=5
else
if [ $(date +%B) == "abril" ]; then
mes=5
else
if [ $(date +%B) == "maio" ]; then
mes=4
else
if [ $(date +%B) == "junho" ]; then
mes=5
else
if [ $(date +%B) == "julho" ]; then
mes=5
else
if [ $(date +%B) == "agosto" ]; then
mes=6
else
if [ $(date +%B) ==
"setembro" ]; then
mes=8
else
if [ $(date +%B) ==
"outubro" ]; then
mes=7
else
if [ $(date
+%B) == "novembro" ]; then
mes=8
else
if [
$(date +%B) == "dezembro" ]; then
mes=8
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
printf "# Rio de Janeiro, $(date +%d) de $(date +%B) de $(date +%y)"
printf "%*s" $((width - $dia - $mes - $ano - 35)) ""
printf "#\n"
printf "# Hora do sistema $(date +%H) horas $(date +%M) minutos"
min=2
hor=2
printf "%*s" $((width - $min - $hor - 41 )) ""
printf "#\n"
printf '%.0s#' $(seq 1 $line_length)
printf "##\033[0m\n"
}
# Função para comprimir um arquivo usando gzip
compress() {
file="$1"
if [ -f "$file" ]; then
gzip "$file"
echo "Arquivo $file comprimido com sucesso."
else
echo "O arquivo $file não existe."
fi
}
# Função para descomprimir um arquivo gzip
decompress() {
file="$1"
if [ -f "$file" ]; then
gzip -d "$file"
echo "Arquivo $file descomprimido com sucesso."
else
echo "O arquivo $file não existe."
fi
}
# Função para listar o conteúdo de um arquivo gzip
list_contents() {
file="$1"
if [ -f "$file" ]; then
echo "Conteúdo do arquivo $file:"
zcat "$file" | less
else
echo "O arquivo $file não existe."
fi
}
# Função para imprimir o tabuleiro
print_board() {
clear
# Definindo cores
local red=$(tput setaf 1)
local yellow=$(tput setaf 4)
local reset=$(tput sgr0)
echo " ${board[0]} | ${board[1]} | ${board[2]} " | sed -e "s/X/${red}X${reset}/g" | sed -e
"s/O/${yellow}O${reset}/g"
echo "---+---+---"
echo " ${board[3]} | ${board[4]} | ${board[5]} " | sed -e "s/X/${red}X${reset}/g" | sed -e
"s/O/${yellow}O${reset}/g"
echo "---+---+---"
echo " ${board[6]} | ${board[7]} | ${board[8]} " | sed -e "s/X/${red}X${reset}/g" | sed -e
"s/O/${yellow}O${reset}/g"
}
# Função para verificar se alguém ganhou
check_winner() {
local winner="-"
# Verifica as linhas
for i in 0 3 6; do
if [[ ${board[i]} == ${board[i+1]} && ${board[i+1]} == ${board[i+2]} && ${board[i]} != "-" ]]; then
winner=${board[i]}
fi
done
# Verifica as colunas
for i in 0 1 2; do
if [[ ${board[i]} == ${board[i+3]} && ${board[i+3]} == ${board[i+6]} && ${board[i]} != "-" ]]; then
winner=${board[i]}
fi
done
# Verifica as diagonais
if [[ ${board[0]} == ${board[4]} && ${board[4]} == ${board[8]} && ${board[0]} != "-" ]];
then
winner=${board[0]}
elif [[ ${board[2]} == ${board[4]} && ${board[4]} == ${board[6]} && ${board[2]} != "-" ]]; then
winner=${board[2]}
fi
echo $winner
}
# Função principal do jogo
jogar_velha() {
declare -a board=(1 2 3 4 5 6 7 8 9)
local player="X"
local winner="-"
local moves=0
while [[ "$winner" == "-" && "$moves" -lt 9 ]]; do
print_board
echo "Jogador $player, é sua vez. Escolha uma posição (1-9):"
read choice
if [[ ${board[choice-1]} == "1" || ${board[choice-1]} == "2" || ${board[choice-1]} == "3" || ${board[choice-1]} == "4" || ${board[choice-1]} == "5" || ${board[choice-1]} == "6" || ${board[choice-1]} == "7" || ${board[choice-1]} == "8" || ${board[choice-1]} == "9" ]];
then
board[choice-1]=$player
winner=$(check_winner)
if [[ "$player" == "X" ]]; then
player="O"
else
player="X"
fi
((moves++))
else
echo "Posição ocupada. Escolha outra."
fi
done
print_board
if [[ "$winner" != "-" ]]; then
if [[ "$winner" == "X" ]]; then
echo "Parabéns! Jogador X venceu!"
sleep 3
else
echo "Parabéns! Jogador O venceu!"
sleep 3
fi
else
echo "Empate!"
sleep 3
fi
}
# Função que realiza operações com gzip
gzip_operations() {
# Menu principal
while true; do
echo "1. Comprimir um arquivo"
echo "2. Descomprimir um arquivo gzip"
echo "3. Listar conteúdo de um arquivo gzip"
echo "4. Sair"
read -p "Escolha uma opção: " option
case $option in
1)
ls
read -p "Digite o nome do arquivo que deseja comprimir: " file
compress "$file"
;;
2)
ls
read -p "Digite o nome do arquivo gzip que deseja descomprimir: " file
decompress "$file"
;;
3)
ls
read -p "Digite o nome do arquivo gzip que deseja listar: " file
list_contents "$file"
;;
4)
echo "Saindo..."
return 0
;;
*)
echo "Opção inválida."
;;
esac
done
}
# Função para exibir informações do sistema
system_info() {
clear
echo "Informações do Sistema:"
uname -a
echo ""
echo "Uso de disco:"
df -h
echo ""
echo "Uso de memória:"
free -h
}
# Função para exibir o menu
show_menu() {
echo "Menu:"
echo " 1. Visualizar informações do sistema"
echo " 2. Gerenciamento de processos"
echo " 3. Gzip_operations"
echo " 4. Jogar jogo da velha"
echo " 5. Sair"
read -p "Escolha uma opção: " option
}
process() {
while true; do
echo "Gerenciar processo"
echo "1. Listar processos"
echo "2. Matar processo"
echo "3. Voltar ao menu principal"
read -p "Escolha: " option
case $option in
1) ps aux ;;
2)
read -p "Digite o PID do processo que deseja encerrar: " pid
kill -9 $pid ;;
3)
echo "Voltando ao Menu Principal..."
sleep 1
break ;;
*)
echo "Opção inválida"
;;
esac
done
}
# Loop do menu
while true; do
cabecalho
show_menu
case $option in
1)
system_info
read -n 1 -s -r -p "Pressione qualquer tecla para voltar ao menu..."
;;
2)
clear
process
;;
3)
clear
gzip_operations
;;
4)
clear
jogar_velha
;;
5)
clear
echo "Saindo..."
exit 0
;;
*)
echo "Opção inválida. Pressione qualquer tecla para continuar..."
read -n 1 -s -r
;;
esac
done
